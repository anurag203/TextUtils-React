{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","placeholder","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","len_words","s","trim","split","ans","length","Fragment","style","color","heading","rows","backgroundColor","onChange","event","target","value","newUppertext","toUpperCase","showAlert","toLowerCase","i","navigator","clipboard","writeText","toFixed","About","mystyle1","setMystyle","_useState3","_useState4","btntext","setbtntext","aria-labelledby","data-bs-parent","Alert","alert","role","str","new_s","substr","capitalize","msg","defaultProps","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.f7177fd6.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"#\">{props.aboutText}</a>\r\n                        </li>\r\n                    </ul>\r\n                    <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                    </form>\r\n                    <div className={`form-check form-switch padd1 fifth text-${props.mode === \"light\" ? \"dark\" : \"light\"}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\"  id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label sixth \" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    aboutText: PropTypes.string\r\n};\r\nNavbar.defaultProps =\r\n{\r\n    title: \"Set Title Here\",\r\n    aboutText: \"Set AboutText here\"\r\n};","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState(\"\");\r\n    function upperCase() {\r\n        // console.log(\"Uppercase was clicked\");\r\n        let newUppertext = text.toUpperCase();\r\n        setText(newUppertext);\r\n        props.showAlert(\"Converted to UpperCase!\",\"success\");\r\n    };\r\n    function lowerCase() {\r\n        // console.log(\"Uppercase was clicked\");\r\n        let newUppertext = text.toLowerCase();\r\n        setText(newUppertext);\r\n        props.showAlert(\"Converted to LowerCase!\",\"success\");\r\n    };\r\n    function capitalizeEachWord() {\r\n        let newUppertext = \"\";\r\n        for (let i = 0; i < text.length; i++) {\r\n            if (i === 0 || text[i - 1] === \" \") {\r\n                newUppertext += text[i].toUpperCase();\r\n            }\r\n            else newUppertext += text[i];\r\n        }\r\n        setText(newUppertext);\r\n        props.showAlert(\"Capatilized Each word!\",\"success\");\r\n    };\r\n    function copyText() {\r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert(\"Text Copied to Clipboard!\",\"success\");\r\n    }\r\n    function removeExtraSpaces() {\r\n        let newUppertext = \"\";\r\n        for (let i = 0; i < text.length; i++) {\r\n            if ((i === 0 || text[i - 1] === \" \") && text[i] === \" \") {\r\n                continue;\r\n            }\r\n            else newUppertext += text[i];\r\n        }\r\n        setText(newUppertext);\r\n        props.showAlert(\"Removed Extra Spaces!\",\"success\");\r\n    };\r\n    function clearAll() {\r\n        // console.log(\"Uppercase was clicked\");\r\n        setText(\"\");\r\n        props.showAlert(\"Cleared All!\",\"success\");\r\n    };\r\n    function handleOnChange(event) {\r\n        // console.log(\"on change\");\r\n        setText(event.target.value);\r\n    };\r\n    function len_words(){\r\n        let s=text.trim().split(\" \");\r\n        let ans =s.length;\r\n        if(s[s.length-1].length==0) ans--;\r\n        return ans;\r\n    };\r\n    return (\r\n        <>\r\n            <div className=\"container my-4\">\r\n                <h1 className='fourth' style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}>{props.heading}</h1>\r\n                <div className=\"mb-3 my-4\" >\r\n                    {/* <label for=\"myBox\" className=\"form-label\">{props.heading}</label> */}\r\n                    <textarea className=\"form-control\" id=\"myBox\" rows=\"10\" style={{ backgroundColor: props.mode === \"light\" ? \"white\" : \"black\", color: props.mode === \"light\" ? \"black\" : \"white\" }} onChange={handleOnChange} value={text} placeholder='Enter the text...' ></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-2 my-3\" onClick={upperCase}>Convert to Upppercase</button>\r\n                <button className=\"btn btn-secondary mx-2  my-3\" onClick={lowerCase}>Convert to Lowercase</button>\r\n                <button className=\"btn btn-danger mx-2  my-3\" onClick={capitalizeEachWord}>Capitalize Every Word</button>\r\n                <button className=\"btn btn-warning mx-2  my-3\" onClick={copyText}>Copy Text</button>\r\n                <button className=\"btn btn-info mx-2  my-3\" onClick={removeExtraSpaces}>Remove Extra Spaces</button>\r\n                <button className=\"btn btn-dark mx-2  my-3\" onClick={clearAll}>Clear All</button>\r\n            </div>\r\n            <div className=\"container my-3\">\r\n                <div className=\"second\">\r\n                    <h2 className='third'>Your text summary</h2>\r\n                    <p className='first'>{len_words()} words, {text.length} characters </p>\r\n                    <p className='first'>{(0.008 * len_words()).toFixed(4)} minutes to read</p>\r\n                </div>\r\n                <div className=\"secondd\" style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}>\r\n                    <h2 className='third'>Preview</h2>\r\n                    <p className='my-4 text-muted'>{text.length > 0 ? text : \"Enter something in the textbox to preview it here...\"}</p>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState }  from 'react'\r\n\r\nexport default function About() {\r\n\r\n    const [mystyle1,setMystyle] = useState({\r\n        color: \"black\" ,\r\n        backgroundColor: \"white\"\r\n    });\r\n    const [btntext,setbtntext]=useState(\"Enable Dark Mode\");\r\n    function toggleStyle()\r\n    {\r\n        if(mystyle1.color=== \"white\")\r\n        {\r\n            setMystyle({\r\n                color: \"black\" ,\r\n        backgroundColor: \"white\"\r\n            });\r\n            setbtntext(\"Enable Dark Mode\");\r\n        }\r\n        else\r\n        {\r\n            setMystyle({\r\n                color: \"white\" ,\r\n                backgroundColor: \"black\"\r\n            });\r\n            setbtntext(\"Enable Light Mode\");\r\n        }\r\n    };\r\n    return (\r\n        <div className='container' style={mystyle1}>\r\n            <h1 className='my-4'>About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\" >\r\n                <div className=\"accordion-item\" >\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" type=\"button\" style={mystyle1} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" style={mystyle1} aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" >\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" style={mystyle1} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" style={mystyle1} aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" >\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" style={mystyle1} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" style={mystyle1} aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"d-flex justify-content-center\">\r\n                <button onClick={toggleStyle} className=\"btn btn-primary my-5\">{btntext}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    function capitalize(str)\r\n    {\r\n        let new_s=\"\",s=str.toLowerCase();\r\n        new_s+=s[0].toUpperCase();\r\n        new_s+=s.substr(1);\r\n        return new_s;\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show container my-2`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)} </strong> : {props.alert.msg}\r\n            {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\r\nimport Navbar from './components/Navbar';\r\nimport TextForm from './components/TextForm';\r\nimport About from './components/About';\r\nimport React, { useState } from 'react'\r\nimport Alert from './components/Alert';\r\n// import {\r\n//   BrowserRouter as Router,\r\n//   Routes,\r\n//   Route,\r\n// } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState(\"light\");\r\n  const [alert, setAlert] = useState(null);\r\n  function toggleMode() {\r\n    if (mode === \"light\") {\r\n      setMode(\"dark\");\r\n      document.body.style.backgroundColor = \"black\";\r\n      showAlert(\"Dark mode has been enabled\", \"success\");\r\n    }\r\n    else {\r\n      setMode(\"light\");\r\n      document.body.style.backgroundColor = \"white\";\r\n      showAlert(\"Light mode has been enabled\", \"success\");\r\n    }\r\n  };\r\n  function showAlert(message, type) {\r\n    setAlert({\r\n      msg: message,\r\n      type: type\r\n    });\r\n    setTimeout(() => {\r\n      setAlert(null);\r\n    }, 1500);\r\n  };\r\n  return (\r\n    <>\r\n      {/* <Router>\r\n        <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" mode={mode} toggleMode={toggleMode} />\r\n        <Alert alert={alert} />\r\n        <Routes>\r\n          <Route exact path=\"/\" element={<TextForm heading=\"Enter the test to analyze below:\" mode={mode} showAlert={showAlert} />} />\r\n          <Route exact path=\"/about\" element={<About />} />\r\n        </Routes>\r\n      </Router> */}\r\n      <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" mode={mode} toggleMode={toggleMode} />\r\n      <Alert alert={alert} />\r\n      <TextForm heading=\"Enter the test to analyze below:\" mode={mode} showAlert={showAlert} />\r\n      <About/>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}